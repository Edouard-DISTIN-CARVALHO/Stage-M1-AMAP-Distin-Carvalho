theme_classic()
# Calculer la différence entre les valeurs extrèmes pour chaque regime de feu
Mean <- Mean %>%  mutate(year = year(date))
AmplitudeMean <- Mean %>%
group_by(year, fire_regime) %>%
summarise(leaves = max(leaves) - min(leaves),
twigs = max(twigs) - min(twigs),
flower = max(flower) - min(flower),
fruits = max(fruits) - min(fruits),
seeds = max(seeds) - min(seeds),
outros = max(outros) - min(outros),
total = max(total) - min(total))
dados_std <- read.csv("ESA_NPP_litterfal_with_interpolated_basal_area.csv")
View(dados_std)
names(dados_std)[8:14] <- c("leaves", "twigs", "flower",
"fruits", "seeds", "outros", "total")
dados_std <- dados_std %>%  mutate(fire_regime = plot_code)
names(dados_std)[names(dados_std) == "dados_std$fire_regime"] <- "fire_regime"
dados_std$fire_regime <- factor(dados_std$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
dados_std$fire_regime <- factor(dados_std$fire_regime, levels = c("annual", "biennial", "triennial",
"control_an", "control_bi", "control_tri"))
dados_std$fire_regime <- factor(dados_std$fire_regime, levels = c("annual", "biennial", "triennial",
"control_an", "control_bi", "control_tri"))
MeanFire100 <- dados_std %>%
group_by(year = lubridate::year(date),
month = lubridate::month(date),
fire_regime) %>%
summarise(leaves = mean(leaves, na.rm = TRUE),
twigs = mean(twigs, na.rm = TRUE),
flower = mean(flower, na.rm = TRUE),
fruits = mean(fruits, na.rm = TRUE),
seeds = mean(seeds, na.rm = TRUE),
outros = mean(outros, na.rm = TRUE),
total = mean(total, na.rm = TRUE)) %>%
ungroup()
dados_std100_fire <- mutate(MeanFire100,
leaves = leaves / total * 100,
twigs = twigs / total * 100,
flower = flower / total * 100,
fruits = fruits / total * 100,
seeds = seeds / total * 100,
outros = outros / total * 100)
dados_std100_fire$date <- as.Date(paste(dados_std100_fire$year, dados_std100_fire$month, "01", sep = "-"))
ggplot(dados_std100_fire, aes(x = date)) +
geom_bar(aes(y = leaves, fill = "Leaves"), stat = "identity", position = "stack") +
geom_bar(aes(y = twigs, fill = "Twigs"), stat = "identity", position = "stack") +
geom_bar(aes(y = flower, fill = "Flower"), stat = "identity", position = "stack") +
geom_bar(aes(y = fruits, fill = "Fruits"), stat = "identity", position = "stack") +
geom_bar(aes(y = seeds, fill = "Seeds"), stat = "identity", position = "stack") +
geom_bar(aes(y = outros, fill = "Others"), stat = "identity", position = "stack") +
scale_fill_manual(values = c("Leaves" = "green", "Twigs" = "brown", "Flower" = "pink",
"Fruits" = "red", "Seeds" = "black", "Others" = "gray"),
name = "Composante de la litière") +
labs(title = "Pourcentage des composants de la litière en fonction des années",
x = "Année",
y = "Pourcentage",
fill = "Composante de la litière") +  facet_wrap(~ fire_regime) +
theme_minimal()
MeanFire100 <- dados_std %>%
group_by(year = lubridate::year(date),
month = lubridate::month(date),
fire_regime) %>%
summarise(leaves = mean(leaves, na.rm = TRUE),
twigs = mean(twigs, na.rm = TRUE),
flower = mean(flower, na.rm = TRUE),
fruits = mean(fruits, na.rm = TRUE),
seeds = mean(seeds, na.rm = TRUE),
outros = mean(outros, na.rm = TRUE),
total = mean(total, na.rm = TRUE)) %>%
ungroup()
View(MeanFire100)
View(MeanFire100)
View(Mean)
# Extraire les moyennes pour chaque date de collecte et chaque régime de feu
Mean <-dados_std %>%
group_by(date = as.Date(date), fire_regime) %>%
summarise(leaves = mean(leaves, na.rm = TRUE),
twigs = mean(twigs, na.rm = TRUE),
flower = mean(flower, na.rm = TRUE),
fruits = mean(fruits, na.rm = TRUE),
seeds = mean(seeds, na.rm = TRUE),
outros = mean(outros, na.rm = TRUE),
total = mean(total, na.rm = TRUE)) %>%
ungroup()
View(Mean)
# Extraire les moyennes pour chaque date de collecte et chaque régime de feu
Mean <-dados %>%
group_by(date = as.Date(date), fire_regime) %>%
summarise(leaves = mean(leaves, na.rm = TRUE),
twigs = mean(twigs, na.rm = TRUE),
flower = mean(flower, na.rm = TRUE),
fruits = mean(fruits, na.rm = TRUE),
seeds = mean(seeds, na.rm = TRUE),
outros = mean(outros, na.rm = TRUE),
total = mean(total, na.rm = TRUE)) %>%
ungroup()
View(Mean)
# Extraire les moyennes pour chaque date de collecte et chaque régime de feu
Mean <-dados_std %>%
group_by(date = as.Date(date), fire_regime) %>%
summarise(leaves = mean(leaves, na.rm = TRUE),
twigs = mean(twigs, na.rm = TRUE),
flower = mean(flower, na.rm = TRUE),
fruits = mean(fruits, na.rm = TRUE),
seeds = mean(seeds, na.rm = TRUE),
outros = mean(outros, na.rm = TRUE),
total = mean(total, na.rm = TRUE)) %>%
ungroup()
View(Mean)
View(dados_std)
names(dados_std)[8:14] <- c("leaves", "twigs", "flower",
"fruits", "seeds", "outros", "total")
dados_std <- dados_std %>%  mutate(fire_regime = plot_code)
names(dados_std)[names(dados_std) == "dados_std$fire_regime"] <- "fire_regime"
dados_std$fire_regime <- factor(dados_std$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
dados_std$fire_regime <- factor(dados_std$fire_regime, levels = c("annual", "biennial", "triennial",
"control_an", "control_bi", "control_tri"))
dados_std$fire_regime <- factor(dados_std$fire_regime, levels = c("annual", "biennial", "triennial",
"control_an", "control_bi", "control_tri"))
dados_std <- read.csv("ESA_NPP_litterfal_with_interpolated_basal_area.csv")
View(dados_norm)
View(dados_basal_tot)
data <- read.csv("ESA_basal_area.csv", header = TRUE)
str(data)
data$basal_area <- as.numeric(data$basal_area)
data$census <- as.factor(data$census)
data <- na.omit(data)
data$date <- as.Date(paste(data$year, data$month, data$day, sep="."), format="%Y.%m.%d")
avgdata = data%>% group_by(plot_code, census) %>%
dplyr::summarize(
total_basal_area = sum(basal_area, na.rm = T),
date = mean(date, na.rm = T))
data <- read.csv("ESA_basal_area.csv", header = TRUE)
str(data)
data$basal_area <- as.numeric(data$basal_area)
data$census <- as.factor(data$census)
data <- na.omit(data)
data$date <- as.Date(paste(data$year, data$month, data$day, sep="."), format="%Y.%m.%d")
avgdata = data%>% group_by(plot_code, census) %>%
dplyr::summarize(
total_basal_area = sum(basal_area, na.rm = T),
date = mean(date, na.rm = T))
View(avgdata)
str(avgdata)
# Create a new column for the interpolated/extrapolated basal area
plants$interpolated_basal_area <- NA
plants <- read.csv("ESA_litterfall_NPP.csv", header = TRUE)
str(plants)
plants$plot_code <- as.factor(plants$plot_code)
plants$date <- as.character(plants$date)
plants$date <- as.Date(plants$date, format("%d/%m/%Y"))
plants$month <- as.factor(plants$month)
# Ensure dates are in Date format
plants$date <- as.Date(plants$date)
avgdata$date <- as.Date(avgdata$date)
# Create a new column for the interpolated/extrapolated basal area
plants$interpolated_basal_area <- NA
View(plants)
View(avgdata)
# Get unique plot_codes
plot_codes <- unique(plants$plot_code)
write.csv(plants, "dados_std")
plants$plot_code <- as.factor(plants$plot_code)
plants$date <- as.character(plants$date)
plants$date <- as.Date(plants$date, format("%d/%m/%Y"))
plants$month <- as.factor(plants$month)
# Ensure dates are in Date format
plants$date <- as.Date(plants$date)
avgdata$date <- as.Date(avgdata$date)
# Create a new column for the interpolated/extrapolated basal area
plants$interpolated_basal_area <- NA
# Get unique plot_codes
plot_codes <- unique(plants$plot_code)
# Loop through each plot_code
for (plot in plot_codes) {
# Get the dates for the current plot_code in plants
plant_dates <- plants[plants$plot_code == plot, "date"]
# Subset avgdata for the given plot_code
plot_data <- avgdata[avgdata$plot_code == plot, ]
# Perform interpolation for dates within the range
interpolated <- approx(x = plot_data$date, y = plot_data$total_basal_area, xout = plant_dates, rule = 2)$y
# Extrapolate for dates beyond the range if necessary
last_date <- max(plot_data$date)
if (any(plant_dates > last_date)) {
# Calculate the rate of change (slope) using the last two points in avgdata
last_two_points <- tail(plot_data, 2)
slope <- diff(last_two_points$total_basal_area) / as.numeric(diff(last_two_points$date))
# Extrapolate for dates beyond the last date in avgdata
future_dates <- plant_dates[plant_dates > last_date]
extrapolated_values <- last_two_points$total_basal_area[2] + slope * as.numeric(future_dates - last_date)
# Replace NA values in interpolated with extrapolated values
interpolated[is.na(interpolated) & plant_dates > last_date] <- extrapolated_values
}
# Assign the interpolated/extrapolated values to the corresponding rows in plants
plants$interpolated_basal_area[plants$plot_code == plot] <- interpolated
}
write.csv(plants, "dados_std")
# Replace NA values in interpolated with extrapolated values
interpolated[is.na(interpolated) & plant_dates > last_date] <- extrapolated_values
setwd("C:/Users/edoua/OneDrive/Documents/R/AMAP/Dados")
library(dplyr)
library(lubridate)
library(ggplot2)
data <- read.csv("ESA_basal_area.csv", header = TRUE)
str(data)
data$basal_area <- as.numeric(data$basal_area)
data$census <- as.factor(data$census)
data <- na.omit(data)
data$date <- as.Date(paste(data$year, data$month, data$day, sep="."), format="%Y.%m.%d")
avgdata = data%>% group_by(plot_code, census) %>%
dplyr::summarize(
total_basal_area = sum(basal_area, na.rm = T),
date = mean(date, na.rm = T))
avgdata <- as.data.frame(avgdata)
str(avgdata)
plants <- read.csv("ESA_litterfall_NPP.csv", header = TRUE)
str(plants)
plants$plot_code <- as.factor(plants$plot_code)
plants$date <- as.character(plants$date)
plants$date <- as.Date(plants$date, format("%d/%m/%Y"))
plants$month <- as.factor(plants$month)
# Ensure dates are in Date format
plants$date <- as.Date(plants$date)
avgdata$date <- as.Date(avgdata$date)
# Create a new column for the interpolated/extrapolated basal area
plants$interpolated_basal_area <- NA
# Get unique plot_codes
plot_codes <- unique(plants$plot_code)
# Loop through each plot_code
for (plot in plot_codes) {
# Get the dates for the current plot_code in plants
plant_dates <- plants[plants$plot_code == plot, "date"]
# Subset avgdata for the given plot_code
plot_data <- avgdata[avgdata$plot_code == plot, ]
# Perform interpolation for dates within the range
interpolated <- approx(x = plot_data$date, y = plot_data$total_basal_area, xout = plant_dates, rule = 2)$y
# Extrapolate for dates beyond the range if necessary
last_date <- max(plot_data$date)
if (any(plant_dates > last_date)) {
# Calculate the rate of change (slope) using the last two points in avgdata
last_two_points <- tail(plot_data, 2)
slope <- diff(last_two_points$total_basal_area) / as.numeric(diff(last_two_points$date))
# Extrapolate for dates beyond the last date in avgdata
future_dates <- plant_dates[plant_dates > last_date]
extrapolated_values <- last_two_points$total_basal_area[2] + slope * as.numeric(future_dates - last_date)
# Replace NA values in interpolated with extrapolated values
interpolated[is.na(interpolated) & plant_dates > last_date] <- extrapolated_values
}
# Assign the interpolated/extrapolated values to the corresponding rows in plants
plants$interpolated_basal_area[plants$plot_code == plot] <- interpolated
}
write.csv(plants, "ESA_NPP_litterfal_with_interpolated_basal_area")
dados_std <- read.csv("ESA_NPP_litterfal_with_interpolated_basal_area", header = TRUE)
View(dados_std)
dados_std <- dados_std[, -1]
dados_std[,8:14] <- dados_std[,8:14]/dados_std[,17]
View(dados_std)
dados_basal <- read.csv("ESA_basal_area.csv", header = TRUE, sep = ",", dec =".")
dados_basal$basal_area <- as.numeric(dados_basal$basal_area)
dados_basal <- mutate(dados_basal, basal_area = ifelse(is.na(basal_area), 0, basal_area))
#### Calcul des aires basales par parcelle de chaque année ####
dados_basal_tot <- dados_basal%>% group_by(plot_code, census) %>%
summarize(somme_basal_area = sum(basal_area, na.rm = TRUE))
# Fonction pour estimer les valeurs manquantes pour chaque plot_code
missing_year <- (c("2018", "2020", "2022"))
interpolation_year<- function(df, missing_year) {
all_year <- sort(unique(c(df$year, missing_year)))
interpolation <- approx(df$year, df$somme_basal_area, xout = all_year)
data.frame(year = interpolation$x, somme_basal_area = interpolation$y)
}
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
dados_basal_2 <- dados_basal_tot %>%
select(plot_code) %>%
distinct() %>%
inner_join(dados_basal_2, by = "plot_code")
# Ajout variable fire_regime
dados_basal_2  <- dados_basal_2  %>%  mutate(fire_regime = plot_code)
names(dados_basal_2 )[names(dados_basal_2 ) == "dados_basal_2$fire_regime"] <- "fire_regime"
dados_basal_2$fire_regime <- factor(dados_basal_2$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
color <- c("control_bi" = "green", "biennial" = "green",
"control_tri" = "blue", "triennial" = "blue",
"control_an" = "red", "annual" = "red")
getwd()
#setwd("C:/Users/distincarvalho/OneDrive/Documents/R/AMAP/Dados") # AMAP
setwd("C:/Users/edoua/OneDrive/Documents/R/AMAP/Dados") #GalaxyBook
library(dplyr)
library(lubridate)
library(ggplot2)
dados_basal <- read.csv("ESA_basal_area.csv", header = TRUE, sep = ",", dec =".")
dados_basal$basal_area <- as.numeric(dados_basal$basal_area)
dados_basal <- mutate(dados_basal, basal_area = ifelse(is.na(basal_area), 0, basal_area))
#### Calcul des aires basales par parcelle de chaque année ####
dados_basal_tot <- dados_basal%>% group_by(plot_code, census) %>%
summarize(somme_basal_area = sum(basal_area, na.rm = TRUE))
# Fonction pour estimer les valeurs manquantes pour chaque plot_code
missing_year <- (c("2018", "2020", "2022"))
interpolation_year<- function(df, missing_year) {
all_year <- sort(unique(c(df$year, missing_year)))
interpolation <- approx(df$year, df$somme_basal_area, xout = all_year)
data.frame(year = interpolation$x, somme_basal_area = interpolation$y)
}
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
dados_basal_2 <- dados_basal_tot %>%
select(plot_code) %>%
distinct() %>%
inner_join(dados_basal_2, by = "plot_code")
# Ajout variable fire_regime
dados_basal_2  <- dados_basal_2  %>%  mutate(fire_regime = plot_code)
names(dados_basal_2 )[names(dados_basal_2 ) == "dados_basal_2$fire_regime"] <- "fire_regime"
dados_basal_2$fire_regime <- factor(dados_basal_2$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
dados_basal$basal_area <- as.numeric(dados_basal$basal_area)
dados_basal <- mutate(dados_basal, basal_area = ifelse(is.na(basal_area), 0, basal_area))
#### Calcul des aires basales par parcelle de chaque année ####
dados_basal_tot <- dados_basal%>% group_by(plot_code, census) %>%
summarize(somme_basal_area = sum(basal_area, na.rm = TRUE))
# Fonction pour estimer les valeurs manquantes pour chaque plot_code
missing_year <- (c("2018", "2020", "2022"))
interpolation_year<- function(df, missing_year) {
all_year <- sort(unique(c(df$year, missing_year)))
interpolation <- approx(df$year, df$somme_basal_area, xout = all_year)
data.frame(year = interpolation$x, somme_basal_area = interpolation$y)
}
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
# Ajout variable fire_regime
dados_basal_2  <- dados_basal_2  %>%  mutate(fire_regime = plot_code)
dados_basal_2 <- dados_basal_tot %>%
select(plot_code) %>%
distinct() %>%
inner_join(dados_basal_2, by = "plot_code")
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
getwd()
#setwd("C:/Users/distincarvalho/OneDrive/Documents/R/AMAP/Dados") # AMAP
setwd("C:/Users/edoua/OneDrive/Documents/R/AMAP/Dados") #GalaxyBook
library(dplyr)
library(lubridate)
library(ggplot2)
dados_basal <- read.csv("ESA_basal_area.csv", header = TRUE, sep = ",", dec =".")
dados_basal$basal_area <- as.numeric(dados_basal$basal_area)
dados_basal <- mutate(dados_basal, basal_area = ifelse(is.na(basal_area), 0, basal_area))
#### Calcul des aires basales par parcelle de chaque année ####
dados_basal_tot <- dados_basal%>% group_by(plot_code, census) %>%
summarize(somme_basal_area = sum(basal_area, na.rm = TRUE))
# Fonction pour estimer les valeurs manquantes pour chaque plot_code
missing_year <- (c("2018", "2020", "2022"))
interpolation_year<- function(df, missing_year) {
all_year <- sort(unique(c(df$year, missing_year)))
interpolation <- approx(df$year, df$somme_basal_area, xout = all_year)
data.frame(year = interpolation$x, somme_basal_area = interpolation$y)
}
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
getwd()
#setwd("C:/Users/distincarvalho/OneDrive/Documents/R/AMAP/Dados") # AMAP
setwd("C:/Users/edoua/OneDrive/Documents/R/AMAP/Dados") #GalaxyBook
library(dplyr)
library(lubridate)
library(ggplot2)
dados_basal <- read.csv("ESA_basal_area.csv", header = TRUE, sep = ",", dec =".")
dados_basal$basal_area <- as.numeric(dados_basal$basal_area)
dados_basal <- mutate(dados_basal, basal_area = ifelse(is.na(basal_area), 0, basal_area))
#### Calcul des aires basales par parcelle de chaque année ####
dados_basal_tot <- dados_basal%>% group_by(plot_code, year) %>%
summarize(somme_basal_area = sum(basal_area, na.rm = TRUE))
# Fonction pour estimer les valeurs manquantes pour chaque plot_code
missing_year <- (c("2018", "2020", "2022"))
interpolation_year<- function(df, missing_year) {
all_year <- sort(unique(c(df$year, missing_year)))
interpolation <- approx(df$year, df$somme_basal_area, xout = all_year)
data.frame(year = interpolation$x, somme_basal_area = interpolation$y)
}
dados_basal_2 <- dados_basal_tot %>%
group_by(plot_code) %>%
do(interpolation_year(., missing_year)) %>%
ungroup()
dados_basal_2 <- dados_basal_tot %>%
select(plot_code) %>%
distinct() %>%
inner_join(dados_basal_2, by = "plot_code")
# Ajout variable fire_regime
dados_basal_2  <- dados_basal_2  %>%  mutate(fire_regime = plot_code)
names(dados_basal_2 )[names(dados_basal_2 ) == "dados_basal_2$fire_regime"] <- "fire_regime"
dados_basal_2$fire_regime <- factor(dados_basal_2$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
color <- c("control_bi" = "green", "biennial" = "green",
"control_tri" = "blue", "triennial" = "blue",
"control_an" = "red", "annual" = "red")
linetype <- c("control_bi" = "solid", "biennial" = "dashed",
"control_tri" = "solid", "triennial" = "dashed",
"control_an" = "solid", "annual" = "dashed")
dados_basal_tot  <- dados_basal_tot  %>%  mutate(fire_regime = plot_code)
names(dados_basal_tot )[names(dados_basal_tot ) == "dados_basal_tot$fire_regime"] <- "fire_regime"
dados_basal_tot$fire_regime <- factor(dados_basal_tot$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
ggplot(dados_basal_tot, aes(x = year, y = somme_basal_area, color = fire_regime,
linetype = fire_regime)) +  geom_point() +  geom_line() +
scale_color_manual(values = color) + scale_linetype_manual(values = linetype) +
scale_x_continuous(breaks = seq(2016, 2023, by = 1)) +
labs(title = "Evolution de l'aire basale avec prédiction au cours du temps",
x = "Années", y = "Aire Basale (m²/y)", color = "Type de parcelle",
linetype = "Type de parcelle") +
theme_classic()
ggplot(dados_basal_2, aes(x = year, y = somme_basal_area,
color = fire_regime,
linetype = fire_regime)) +
geom_line(aes(group = interaction(fire_regime, plot_code))) +
geom_point(aes(group = interaction(fire_regime, plot_code))) +
scale_color_manual(values = color) +
scale_linetype_manual(values = linetype) +
labs(title = "Evolution de l'aire basale avec prédiction au cours du temps",
x = "Années", y = "Aire Basale (m²/y)", color = "Type de parcelle",
linetype = "Type de parcelle") +
theme_classic()
#### Application au donnée de productivité primaire ####
dados_brutos <- read.csv("ESA_litterfall_NPP.csv", header = TRUE, sep = ",", dec =".")
# suppression erreur donnée
dados <- dados_brutos[-5840, ]
# Suppresion des NA et donnés 2024
dados <- na.omit(dados)
dados <- dados[dados$year != 2024, ]
# Création d'une nouvelle colonne basé sur le régime de feu
dados$date <- as.Date(dados$date, format = "%d/%m/%Y")
dados <- dados %>%  mutate(fire_regime = plot_code)
names(dados)[names(dados) == "dados$fire_regime"] <- "fire_regime"
dados$fire_regime <- factor(dados$fire_regime,
levels = c("ESA-04", "ESA-05", "ESA-06", "ESA-07", "ESA-08", "ESA-09"),
labels = c("control_bi", "biennial", "control_tri", "triennial", "control_an", "annual"))
# Boucle de Normalisation : NPP/Aire Basale pour chaque parcelle de chaque année
dados_norm <- dados
for (year in unique(dados_basal_2$year)) {
if (year %in% dados_norm$year && year %in% dados_basal_2$year) {
for (plot_code in unique(dados_basal_2$plot_code)) {
if (plot_code %in% dados_norm$plot_code && plot_code %in% dados_basal_2$plot_code) {
# Sélectionner la somme_basal_area correspondante
somme_basal_area <- dados_basal_2 %>%
filter(year == !!year, plot_code == !!plot_code) %>%
pull(somme_basal_area)
if (length(somme_basal_area) == 1) {
# Normaliser les colonnes 8 à 14
dados_norm[dados_norm$year == year & dados_norm$plot_code == plot_code, 8:14] <-
dados_norm[dados_norm$year == year & dados_norm$plot_code == plot_code, 8:14] / somme_basal_area
}
}
}
}
}
# Donnée normalisée
dados_norm$date <- as.Date(dados_norm$date, format = "%d/%m/%Y")
ggplot(dados_norm, aes(x = date, y = total_litterfall_MgC_ha_year, color=fire_regime)) +
geom_smooth(method = "loess", span = 0.2)  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Regime de feu") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
ggplot(dados_norm, aes(x = date, y = total_litterfall_MgC_ha_year, color=fire_regime)) +
geom_point()  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Regime de feu") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
ggplot(dados_std, aes(x = date, y = total_litterfall_MgC_ha_year, color=fire_regime)) +
geom_point()  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Regime de feu") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
ggplot(dados_std, aes(x = date, y = total_litterfall_MgC_ha_year, color=plot_code)) +
geom_point()  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Plot_code") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
dados_std$date <- as.Date(dados_std$date, format = "%Y-%m-%d")
ggplot(dados_std, aes(x = date, y = total_litterfall_MgC_ha_year, color=plot_code)) +
geom_point()  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Plot_code") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
ggplot(dados_norm, aes(x = date, y = total_litterfall_MgC_ha_year, color=fire_regime)) +
geom_point()  +
labs(title = "Evolution de la productivité primaire totale normalisée",
x = "Date de collecte", y = "Productivité primaire totale (MgC_m2)",
color = "Regime de feu") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + theme_classic()
